grammar Small_Java;

program : (imports)? MODIFICATEUR 'class_SJ' ID  '{' declarations 'main_SJ' '{' instructions '}' '}' ;
imp: 'import' LIB ';';
imports: imp imports|imp;
declarations : (declaration declarations)|declaration  ;
declaration : type vars ';' ;
type : INT | FLOAT | STRING;
vars : ((ID ',' vars) | ID) ;
idf : ID;
value : INTVAL | FLOATVAL |STRVAL;
instructions : (inst ';' instructions) | inst ';' ;
inst : affect | ifinst| read | write;
affect : idf ':=' exp|value ;
exp: exp OU op2 | op2;
op2: op2 ET op3 | op3;
op3: NEG op4 | op4;
op4: op4 comp op5 | op5;
op5: op5 PLS op6 | op5 MNS op6|op6;
op6: op6 MUL op7 | op6 DIV op7 | op7;
op7: '('exp')'| terme;
terme:idf | value;
read:'In_SJ' '('signe',' idf ')';
write:'Out_SJ' '(' STRVAL','idf')';
signe:INTS|FLOATS|STRINGS;
ifinst : IF '(' comp ')' THEN '{' instructions '}' ( |el '{' instructions '}');
el : ELSE;
comp : exp op exp ;
op : SUP | INF | SUPEGAL | INFEGAL | DEFF | EGAL ;


listID : idf ',' listID | idf ;
INTS:'"%d"';
FLOATS:'"%f"';
STRINGS:'"%s"';
IF : 'Si';
THEN : 'Alors';
ELSE : 'Sinon';
MODIFICATEUR:'public'|'protected';
ID : [a-zA-Z][a-zA-Z0-9]*;
INT : 'int_SJ';
FLOAT : 'float_SJ';
STRING : 'string_SJ';

ET:'&';
OU:'|';
NEG:'!';
AFF: ':=';
PLS:'+';
MNS:'-';
DIV:'/';
MUL:'*';
EGAL: '=';
DEFF: '!=';
SUP : '>';
INF : '<';
SUPEGAL:'>=';
INFEGAL:'<=';
INTVAL : '0'|[1-9][0-9]* ;
FLOATVAL : '0'|[1-9][0-9]*('.'[0-9]*) ;
LIB:' Small_Java.lang'|' Small_Java.io';
WHITESPACE : [ \n\t\r] -> skip;
STRVAL : '"'(~["]|'\\"')*'"';
